import tkinter as tk
from tkinter import messagebox

# Minimax AI
def minimax(board, is_max):
    winner = check_win(board)
    if winner: return {'X': -1, 'O': 1, 'D': 0}[winner]
    best = -2 if is_max else 2
    for i in range(3):
        for j in range(3):
            if not board[i][j]:
                board[i][j] = 'O' if is_max else 'X'
                score = minimax(board, not is_max)
                board[i][j] = ''
                best = max(best, score) if is_max else min(best, score)
    return best

def best_move(board):
    move, best = None, -2
    for i in range(3):
        for j in range(3):
            if not board[i][j]:
                board[i][j] = 'O'
                score = minimax(board, False)
                board[i][j] = ''
                if score > best:
                    best = score
                    move = (i, j)
    return move

def check_win(b):
    lines = b + list(zip(*b)) + [[b[i][i] for i in range(3)], [b[i][2 - i] for i in range(3)]]
    for line in lines:
        if line[0] and line.count(line[0]) == 3: return line[0]
    if all(cell for row in b for cell in row): return 'D'  # Draw
    return None

# GUI
class TicTacToe:
    def __init__(self):
        self.win = tk.Tk()
        self.win.title("Tic-Tac-Toe")
        self.board = [[''] * 3 for _ in range(3)]
        self.buttons = [[None]*3 for _ in range(3)]
        self.build_gui()
        self.win.mainloop()

    def build_gui(self):
        for i in range(3):
            for j in range(3):
                btn = tk.Button(self.win, font=("Arial", 32), width=4, height=2,
                                command=lambda i=i, j=j: self.play(i, j),
                                bg="#f0f0f0", activebackground="#d0d0ff")
                btn.grid(row=i, column=j, padx=5, pady=5)
                self.buttons[i][j] = btn

    def play(self, i, j):
        if self.board[i][j] or check_win(self.board): return
        self.board[i][j] = 'X'
        self.buttons[i][j]['text'] = 'X'
        if self.check_end(): return
        i, j = best_move(self.board)
        self.board[i][j] = 'O'
        self.buttons[i][j]['text'] = 'O'
        self.check_end()

    def check_end(self):
        winner = check_win(self.board)
        if winner:
            msg = "Draw!" if winner == 'D' else f"{winner} wins!"
            self.win.after(300, lambda: (messagebox.showinfo("Game Over", msg), self.reset()))
            return True
        return False

    def reset(self):
        self.board = [[''] * 3 for _ in range(3)]
        for row in self.buttons:
            for btn in row: btn.config(text='')

TicTacToe()

